<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: matheus bras | Blog da HE:labs]]></title>
  <link href="http://helabs.com.br/blog/categories/matheus-bras/atom.xml" rel="self"/>
  <link href="http://helabs.com.br/blog/"/>
  <updated>2013-08-30T10:44:41-03:00</updated>
  <id>http://helabs.com.br/blog/</id>
  <author>
    <name><![CDATA[Time HE:labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementando Login via Facebook na sua App Rails]]></title>
    <link href="http://helabs.com.br/blog/2013/06/24/implementando-login-via-facebook-na-sua-app-rails/"/>
    <updated>2013-06-24T10:00:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/06/24/implementando-login-via-facebook-na-sua-app-rails</id>
    <content type="html"><![CDATA[<p>Eu falei anteriormente sobre o <a href="http://helabs.com.br/blog/2013/04/11/passwordless-login/">Passwordless Login</a> e agora vou falar sobre o Login via Facebook. Este post será mais como uma 'receita' de como implementar na sua aplicação Rails. Então, vamos lá.</p>

<!--more-->


<p>Todo mundo que você conhece tem uma conta no Facebook, certo? Até minha mãe fez uma conta no Facebook! Só o Rafael Lima mesmo que não tem (truestory). Implementar login via Facebook na sua aplicação traz uma facilidade bem grande para o usuário fazer seu cadastro. Com uns dois cliques ele já cria a conta e você tem acesso ao nome, email, data de nascimento, avatar e outras informações que pode-se acessar pedindo permissão, como amigos, fotos, likes e por aí vai...</p>

<h3>O que você precisa para implementar o login:</h3>

<ul>
<li>Uma conta no Facebook</li>
<li>Criar uma App no Facebook</li>
<li>Ter uma App usando Rails</li>
<li>As gems <em>omniauth</em> e <em>omniauth-facebook</em></li>
<li>Alguns métodos e controllers</li>
</ul>


<h2>Criando um aplicativo no Facebook</h2>

<p>Acesse <a href="http://developers.facebook.com/apps">http://developers.facebook.com/apps</a> e clique em "<strong>Criar Novo Aplicativo</strong>". Digite o nome do seu App e um namespace.</p>

<p><img src="/images/posts/facebook-login/img0.png" alt="image" /></p>

<p>Próximo passo é pegar o <em>APP ID</em> e o <em>APP Secret</em> e configurá-los como variáveis de ambiente da sua aplicação Rails. Normalmente, colocamos as variáveis no <em>.rvmrc</em> do projeto, mas nada impede que você crie um arquivo <em>.yml</em> e salve estas informações.</p>

<p><img src="/images/posts/facebook-login/img1.png" alt="image" /></p>

<p><code>ruby
  export FACEBOOK_APP_KEY= #{APP ID}
  export FACEBOOK_APP_SECRET= #{APP_SECRET}
</code></p>

<p>Existe a opção de deixar o aplicativo no Facebook em modo 'Sandbox'. Caso esteja ativado, somente você e/ou outras pessoas que estiverem cadastradas como desenvolvedores ou testers poderão usar sua aplicação para fazer o login. Caso você prefira que qualquer pessoa possa se logar sem precisar dar permissão, desative o modo Sandbox. Para ver as configurações de permissões, clique em "<strong>Privilégios de desenvolvedores</strong>" na sidebar.</p>

<p><img src="/images/posts/facebook-login/img2.png" alt="image" /></p>

<p>Depois, na seção "<strong>Selecione o modo como seu aplicativo se integra com Facebook</strong>" clique em "<strong>Site com o Login do Facebook</strong>". Em <em>Site URL</em>, coloque a url onde o Facebook vai enviar as informações da autenticação. Normalmente o path <em>"/auth/facebook/callback"</em> é usado com a gem <em>"omniauth"</em>. Vou explicar isto melhor depois.</p>

<p>Se você estiver configurando a App para desenvolvimento local, o host será "<strong>http://localhost:3000</strong>" ou qualquer que seja seu host local.</p>

<p><img src="/images/posts/facebook-login/img4.png" alt="image" /></p>

<p>E é isto para o aplicativo do Facebook. Agora, vamos para o Rails:</p>

<h2>A parte do Rails...</h2>

<p>Primeiro, adicione no seu Gemfile estas gems:</p>

<p><code>ruby
  gem 'omniauth'
  gem 'omniauth-facebook'
</code></p>

<p>Depois, crie um arquivo chamado <em>"omniauth.rb"</em> em config/initializers:</p>

<p>```ruby
  Rails.application.config.middleware.use OmniAuth::Builder do</p>

<pre><code>provider :facebook, ENV['FACEBOOK_APP_KEY'], ENV['FACEBOOK_APP_SECRET'], :scope =&gt; "email"
</code></pre>

<p>  end
```</p>

<p>Note que a opção "scope" tem o valor "email". Isto significa que pediremos permissão para ter acesso, além das informações básicas do usuários, ao email. Existem outros tipos de "scopes" para ter acesso a lista de amigos do usuário e aos posts no mural. Você pode saber mais sobre os tipos de permissão em: <a href="https://developers.facebook.com/docs/reference/login/#permissions">https://developers.facebook.com/docs/reference/login/#permissions</a>.</p>

<p>Precisamos agora de um model para o usuário:</p>

<p><code>ruby
  $ rails g model User name:string email:string access_token:string uid:string photo_url:string provider:string
  $ rake db:migrate
</code></p>

<p>Precisamos também de um controller para cuidar da autenticação. Vamos criar o <em>SessionsController</em>:</p>

<p><code>ruby
  $ rails g controller Sessions
</code></p>

<p>Neste controller vamos implementar algumas actions:</p>

<p>```ruby
  # encoding: UTF-8
  class SessionsController &lt; ApplicationController</p>

<pre><code>def create
  auth = request.env["omniauth.auth"]
  user = User.find_or_create_with_omniauth(auth)
  session[:user_id] = user.id
  redirect_to secret_page_path, :notice =&gt; "Opa! Você está online!"
end

def failure
  redirect_to root_url
end

def destroy
  session[:user_id] = nil
  redirect_to root_url, :notice =&gt; "Volte em breve!"
end
</code></pre>

<p>  end
```</p>

<p>A action <em>create</em> vai receber as informações do usuário enviado pelo Facebook através do <em>request.env["omniauth.auth"]</em>. Caso ele não exista no banco de dados, nós criaremos o usuário ou então, somente o encontraremos através do método que ainda será implementado no model <em>User</em>, find_or_create_with_omniauth(). Para saber mais sobre o Auth Hash, <a href="https://github.com/mkdynamic/omniauth-facebook#auth-hash">clique aqui</a>. A action <em>failure</em> vai redirecionar o usuário para o root_url, caso a autenticação falhe. E a action <em>destroy</em>, vai simplesmente deslogar o usuário.</p>

<p>Agora vamos criar as rotas para este controller:</p>

<p><code>ruby
  match "/auth/:provider/callback" =&gt; "sessions#create", as: :auth_callback
  match "/auth/failure" =&gt; "sessions#failure", as: :auth_failure
  match "/logout" =&gt; "sessions#destroy", as: :logout
</code></p>

<p>Lembra que ao criarmos o aplicativo no Facebook definimos a url para login como <strong>http://localhost:3000/auth/facebook/callback</strong>? Esta rota aponta para a action create do nosso <em>SessionsController</em>. Você pode mudar a rota para a action create, mas lembre-se de mudar nas configurações do aplicativo do Facebook também.</p>

<p>Vamos voltar ao model <em>User</em> para implementar o método <em>find_or_create_with_omniauth</em>:</p>

<p>```ruby
  def self.find_or_create_with_omniauth(auth)</p>

<pre><code>user = self.find_or_create_by_provider_and_uid(auth.provider, auth.uid)
user.assign_attributes({ name: auth.info.name, email: auth.info.email, photo_url: auth.info.image, access_token: auth.credentials.token })
user.save!
user
</code></pre>

<p>  end
```</p>

<p>Na primeira linha do método tente achar o usuário pelos campos provider e uid. Se não for encontrado, nós criaremos um. Logo na linha debaixo nós setamos alguns atributos pelo Auth Hash, como: <em>nome, email, avatar e o access_token</em>. Então, salvamos o usuário e o retornamos na última linha.</p>

<p>Para finalizar, só precisamos criar algum link onde o usuário clique e faça o login. Adicione na view da sua preferência:</p>

<p><code>ruby
  &lt;%= link_to "Login com Facebook", "/auth/facebook" %&gt;
</code></p>

<p>E pronto. O usuário já pode fazer o login usando o Facebook na sua aplicação Rails. Como no outro post, eu também preparei uma aplicação exemplo no <a href="https://facebook-login-example.herokuapp.com/">Heroku</a> e disponibilizei o código no <a href="https://github.com/matheusbras/facebook-login-example">Github</a>. É uma versão modificada da aplicação do outro exemplo. ;)</p>

<p>Heroku -> https://facebook-login-example.herokuapp.com/
Github -> https://github.com/matheusbras/facebook-login-example</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passwordless Login]]></title>
    <link href="http://helabs.com.br/blog/2013/04/11/passwordless-login/"/>
    <updated>2013-04-11T11:15:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/04/11/passwordless-login</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/passwordless.png" alt="image" /></p>

<p>Neste post, vou mostrar como fazer uma aplicação permitir que o usuário faça login sem precisar digitar/lembrar de sua senha. Não será nada complexo demais e nem uma solução perfeita. No final, postarei o link para uma aplicação exemplo que preparei exemplificando o método.</p>

<h1>Por que fazer login sem senha?</h1>

<p>Fazer login está se tornando uma tarefa complicada. Agora que temos muitos usuários acessando aplicações pelo smartphone, digitar a senha na telinha do telefone é complicado. Mesmo nas telas gigantes dos celulares da Samsung, é chato e ruim. Precisamos de uma maneira mais simples de fazê-lo.</p>

<!-- more -->


<p>Os usuários têm que lembrar seu username e senha para logarem. Mas muitas vezes não os lembram. E é aí que entra o “esqueci minha senha” e o usuário precisa abrir seu email e clicar no link para poder recuperar sua senha. Ou então para que a senha não seja esquecida eles usam: password, senha123 ou 123456.</p>

<p>Uma solução proposta por Ben Brown neste <a href="http://notes.xoxco.com/post/27999787765/is-it-time-for-password-less-login">post</a> é gerar uma senha totalmente aleatória quando o usuário se cadastrar no site e enviar por email um link para fazer o login. A maioria dos sites permitem que o login seja mantido pra sempre, porém se o usuário precisar fazer o login novamente, a aplicação gera outra senha para o usuário e envia outro link para ele por email.</p>

<h1>Como eu resolvi esse problema</h1>

<p>Então vamos ao código:</p>

<p>Primeiro, criei um model User com os campos <em>email</em> e <em>access_token</em>.</p>

<p><code>ruby
rails g model User email:string access_token:string
</code></p>

<p>Depois, criei um método <em>generate_access_token </em>que se encarrega de gerar uma nova senha para o usuário. E também o método <em>access_token_exists? </em>(token) para checar se, por acaso, a senha já existe para algum usuário.</p>

<p>```ruby
def self.access_token_exists?(token)
  where(access_token: token).any?
end</p>

<p>private
  def generate_access_token</p>

<pre><code>loop do
  token = SecureRandom.hex(30)
  return self.access_token = token unless User.access_token_exists?(token)
end
</code></pre>

<p>  end
```</p>

<p>E então implementei o método <em>generate_access_token_and_save </em>para gerar a senha para o usuário e salvá-la. Isso fecha por enquanto o model User. Voltaremos nele mais tarde.</p>

<p><code>ruby
def generate_access_token_and_save
  generate_access_token and save
end
</code></p>

<p>Agora vamos ao <em>UsersController </em>. Criei um controller simples com duas actions: New e Create.</p>

<p>```ruby</p>

<h1>encoding: UTF-8</h1>

<p>class UsersController &lt; ApplicationController
  def new</p>

<pre><code>@user = User.new
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@user = User.new(params[:user])
if @user.generate_access_token_and_save
  redirect_to new_user_path, notice: "Agora olha teu email lá! :)"
else
  render :new
end
</code></pre>

<p>  end
end
```</p>

<p>Em seguida, criei o SessionsController para lidar com o login. O controller vai encontrar o usuário que possua a access_token fornecida e colocar seu id em uma session.</p>

<p>```ruby</p>

<h1>encoding: UTF-8</h1>

<p>class SessionsController &lt; ApplicationController
  def create</p>

<pre><code>user = User.find_by_access_token!(params[:token])
session[:user_id] = user.id
redirect_to(secret_page_path, notice: "Você está logado! :)")
</code></pre>

<p>  rescue ActiveRecord::RecordNotFound</p>

<pre><code>redirect_to(root_url, notice: "Acesso inválido... recupere sua senha.")
</code></pre>

<p>  end
end
```</p>

<p>Agora que já tenho o controller para lidar com o link de login, posso criar o Mailer para enviar o link para o email do usuário.</p>

<p>```ruby</p>

<h1>encoding: UTF-8</h1>

<p>class Notification &lt; ActionMailer::Base
  default from: "estagiario@passwordlessapp.com"
  layout "mailer"</p>

<p>  def auth_link(user)</p>

<pre><code>@user = user

mail to: @user.email, subject: "[Passwordless App] Aqui está seu link de acesso"
</code></pre>

<p>  end
end
```</p>

<p>Coloquei, então, a chamada para o envio do email dentro do método <em>generate_access_token_and_save </em>no model User.</p>

<p><code>ruby
def generate_access_token_and_save
  Notification.auth_link(self).deliver if generate_access_token and save
end
</code></p>

<p>Usei o SecretPageController para ter uma action que requer autenticação.</p>

<p>```ruby
class SecretController &lt; ApplicationController
  before_filter :authenticate!</p>

<p>  def index
  end
end
```</p>

<p>Aqui estão os helpers de autenticação criados para o SecretPageController.</p>

<p>```ruby</p>

<h1>encoding: UTF-8</h1>

<p>class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  ensure_security_headers
  helper_method :current_user, :user_signed_in?</p>

<p>  private</p>

<p>  def current_user</p>

<pre><code>@current_user ||= User.find(session[:user_id]) if session[:user_id]
rescue ActiveRecord::RecordNotFound
  session.delete(:user_id)
  nil
</code></pre>

<p>  end</p>

<p>  def user_signed_in?</p>

<pre><code>!current_user.nil?
</code></pre>

<p>  end</p>

<p>  def authenticate!</p>

<pre><code>user_signed_in? || redirect_to(root_url, notice: "Você precisa estar autenticado...")
</code></pre>

<p>  end
end
```</p>

<p>E isso já faz o login sem senha funcionar. O usuário se cadastra, recebe um link por email, clica no link, se loga e é redirecionado para a action que requer autenticação.</p>

<p>Eu fiz uma aplicação exemplo que pode ser acessada <a href="http://passwordless.herokuapp.com">clicando aqui</a> e o código também está no <a href="https://github.com/matheusbras/passwordless-app">GitHub</a> com todos os testes. Sintam-se à vontade para mandar pull requests, issues e perguntas.</p>

<p>Obrigado pela sua atenção e abraços!</p>
]]></content>
  </entry>
  
</feed>
