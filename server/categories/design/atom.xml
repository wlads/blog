<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | Blog da HE:labs]]></title>
  <link href="http://helabs.com.br/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://helabs.com.br/blog/"/>
  <updated>2013-08-30T10:44:41-03:00</updated>
  <id>http://helabs.com.br/blog/</id>
  <author>
    <name><![CDATA[Time HE:labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Agile Development, Simplicidade e UX]]></title>
    <link href="http://helabs.com.br/blog/2013/07/15/agile-development-simplicidade-e-ux/"/>
    <updated>2013-07-15T15:03:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/07/15/agile-development-simplicidade-e-ux</id>
    <content type="html"><![CDATA[<p>Uma abordagem de projeto ágil ou <strong>Agile Development</strong> permite definirmos iterações/sprints semanais e fazermos <em>deploy</em> para testarmos uma nova funcionalidade com mais rapidez e eficiência. Do ponto de vista da UX: Se nossos usuários aceitarem e usarem essa nova funcionalidade, manteremos-na.</p>

<!--more-->


<p>Em cada início de iteração (XP) ou <em>sprint</em> (SCRUM), definimos o que será desenvolvido com a certeza que em 1 semana (ou 1 mês) determinada funcionalidade estará em produção para testes A/B, por exemplo. Ou simplesmente ser mantida para ver como os usuários reagem ou se interessam por ela.</p>

<p>Já uma abordagem em cascata (em inglês <em>waterfall approach</em>) é a mais tradicional e utilizada. Ela trata as etapas do projeto separadamente, como fases distintas e tudo isso num processo só de escopo fechado. O maior problema dessa abordagem é que uma etapa precisa que a anterior esteja 100% completa para que possa ser iniciada.</p>

<p>Isso muita vezes tem um impacto significativo nos usuários. Como o escopo é muito grande, a quantidade de complexidade que o usuário terá que aprender de uma só vez quando o software for atualizado, pode ser destrutivamente frustrante.</p>

<p>Se definirmos um escopo de projeto fechado para desenvolver um produto e lançarmos todas as funcionalidades planejadas de um só vez, as chances dos usuários tirarem o devido proveito disso tudo é bastante remoto. E o pior de tudo: custa muito dinheiro. Então, é melhor sermos cautelosos quanto a funcionalidades pré-definidas em escopos robustos. Talvez seja mais interessante lançar uma versão mais enxuta do seu produto e fazer seus usuários aprenderem a tirar proveito de cada nova <em>feature</em> aos poucos, progressivamente. Isso custa menos, melhora a experiência do usuário e otimiza a imagem da marca do seu produto no mercado como algo bem estruturado e testado (sem <em>bugs</em>).</p>

<p>Um produto enxuto desde o início atende um dos doze princícipios do Agile Manifesto, que é a simplicidade. Ela agiliza a criação de um produto com a funcionalidade mínima que seja fácil de usar. Não confunda simplicidade com a criação de um produto simples. Seu produto não precisa ser o mais robusto já no lançamento, pois com seu amadurecimento, talvez você decida mudar algumas estratégias, ou até mesmo, reformular por completo o modelo de negócio e a proposição de valor como um todo. Seja flexível e amadureça-o de forma progressiva e de um "respiro mental" para seus usuários aprenderem aos poucos.</p>

<p><em>"O senso comum parece sugerir que, para vencer a concorrência, é preciso ter um produto superior e com mais funcionalidade. Costumamos pensar que ter maior quantidade de recursos é ser melhor e mais desejável. Não é bem assim"</em> - 37 Signals (2006).</p>

<p>Sempre que sua equipe ou você mesmo tiver uma idéia para um novo recurso, questione-se de forma mais crítica se a nova funcionalidade é realmente necessária para o sucesso do produto. Se você achar que não, descarte-a. Isso resulta em um produto simples e arrumado, que oferece apenas os recursos que o usuário precisa. A partir desse ponto, você pode pensar em novas funcionalidades e lança-las aos poucos, com isso você economiza e os usuários do seu produto/sofware não ficam confusos.</p>

<h2>Outros posts de Mikael</h2>

<p><a href="http://helabs.com.br/blog/2013/02/27/design-responsivo-parte-i-arquivos-css-e-breakpoints">Design Responsivo Parte I: Arquivos CSS e Breakpoints</a></p>

<p><a href="http://helabs.com.br/blog/2013/05/24/design-responsivo-parte-ii-listagens-e-galerias/">Design Responsivo Parte II: Listagens e Galerias</a></p>

<h2>Links</h2>

<ul>
<li><a href="http://www.mikaelcarrara.com">Site Pessoal</a></li>
<li><a href="br.linkedin.com/in/mikaelcarrara/">Linkedin</a></li>
<li><a href="http://dribbble.com/mikaelcarrara">Portfólio no Dribbble</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ferramentas para Designers]]></title>
    <link href="http://helabs.com.br/blog/2013/07/01/ferramentas-para-designers-aluisio/"/>
    <updated>2013-07-01T10:00:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/07/01/ferramentas-para-designers-aluisio</id>
    <content type="html"><![CDATA[<p>Quando se projeta interfaces para aplicações web diariamente, uma das coisas mais importantes é ter uma gama de ferramentas para deixar o processo de trabalho mais produtivo.</p>

<p>Nesse post, irei listar algumas ferramentas que eu uso no meu dia a dia. E que agilizam o design e desenvolvimento Front-end.</p>

<!-- more -->


<h3>Alguns Plugins</h3>

<p><img src="/images/plugins.png" alt="image" /></p>

<p><a href="http://littleipsum.com/"><strong>Little Ipsum</strong></a>
Apesar de existirem diversos geradores de <em>Lorem Ipsum</em> pela web , o <strong>Little Ipsum</strong> funciona de maneira mais prática como um plugin para OS X.</p>

<p><a href="http://www.jumpzero.com/frank/"><strong>Frank DeLoupe</strong></a>
Este color-picker também funciona como um plugin para OS X. Você pode utilizá-lo para copiar o <em>rgb</em> ou <em>hexadecimal</em> de uma cor. Ele também guarda o histórico das últimas cores que você utilizou.</p>

<p><a href="http://photoshopscripts.wordpress.com/2013/02/03/corner-editor-photoshop-script/"><strong>Corner Editor</strong></a>
Para quem sofre com criação e edição de bordas arredondas em elementos no photoshop, este script é uma mão na roda.</p>

<p><a href="http://guideguide.me/"><strong>Guide Guide</strong></a>
Criação de <em>grids</em> no Photoshop não é uma tarefa muito agradável. Este script permite criar linhas guias para o seu documento com apenas alguns cliques .</p>

<h3>Controle de Arquivos</h3>

<p><img src="/images/layervault.png" alt="image" /></p>

<p>Além do já consagrado Dropbox, algumas ferramentas estão sendo criadas com o foco no controle de arquivos para designers .
O <a href="https://www.pixelapse.com/"><strong>Pixel Lapse</strong></a> e o <a href="https://layervault.com/"><strong>Layer Vault</strong></a> são aplicações para o controle, armazenamento e versionamento de arquivos. Eles podem melhorar muito o seu workflow e agilizar o processo entre o time.</p>

<h3>Grids</h3>

<p><img src="/images/grid.png" alt="image" /></p>

<p>O site <a href="https://gridsetapp.com/"><strong>Gridset</strong></a> , além da criação de grids, permite também o gerenciamento dos seus grids. Conta também com um grande número de templates já definidos de grids.</p>

<h3>Cores</h3>

<p><img src="/images/colors.png" alt="image" /></p>

<p>O <a href="https://kuler.adobe.com/"><strong>Kuler</strong></a> é um aplicativo bastante avançado e possui uma série de recursos para a criação e gerenciamento de paleta de cores. Além de ter integração com os softwares da Adobe.</p>

<p>Já o <a href="http://www.colourlovers.com/"><strong>Color Lovers</strong></a>, funciona como uma  comunidade onde você consegue criar, gerenciar e ver ótimas referências de paletas criadas por outros designers.</p>

<h3>Tipografia</h3>

<p><img src="/images/type.png" alt="image" /></p>

<p>Web fonts já estão difundidas e sendo amplamente utilizadas, mas são muitas opções, tornando difícil para encontrar e gerenciar todas elas. O <a href="http://typecast.com/"><strong>Typecast</strong></a> é uma aplicação excelente para poder gerenciar, organizar por projetos, comparar fontes, dentre outros recursos.</p>

<h3>HTML e CSS</h3>

<p><img src="/images/sublime.png" alt="image" /></p>

<p><strong>Live Reload</strong></p>

<p>Para fazer o design direto no browser, esta ferramenta é essencial. O <a href="http://livereload.com/"><strong>Live Reload</strong></a> faz com que ao alterar um arquivo HTML, CSS ou uma imagem, o navegador seja atualizado sem a necessidade de um reload na página manualmente.</p>

<p><strong>Browser Stack</strong></p>

<p>O <a href="http://www.browserstack.com/"><strong>Browser Stack</strong></a> é uma aplicação web para testes cross-browser. Com ele, você consegue visualizar o seu projeto em diferentes browsers e versões rapidamente.</p>

<h3>E você?</h3>

<p>Já usa algum destes recursos? Tem outras sugestões para acrescentar?
Compartilhe suas ferramentas nos comentários também!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Responsivo Parte II: Listagens e Galerias]]></title>
    <link href="http://helabs.com.br/blog/2013/05/24/design-responsivo-parte-ii-listagens-e-galerias/"/>
    <updated>2013-05-24T10:30:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/05/24/design-responsivo-parte-ii-listagens-e-galerias</id>
    <content type="html"><![CDATA[<p>Na maioria dos contextos, uma parte considerável de uma interface Web é feita de listas. Pense num <em>e-commerce</em>, blog ou até mesmo numa <em>Job Board</em>. Seja lá o que for, as listas resolvem bem os nossos problemas e são parte fundamental do Web Design.</p>

<!--more-->


<p>Irei agora demonstrar um pouco como podemos "brincar" com listas usando <em>Media Queries (CSS3)</em>. No exemplo, criarei uma galeria de imagens simples que se comportará de acordo com a resolução de cada dispositivo, seja ele <em>Desktop</em> ou móvel, como <em>Tablets</em> e <em>Smartphones</em>.</p>

<p>Vamos criar uma listagem com a foto de oito pessoas:</p>

<p>```html</p>

<ul class="team-list">
    <li><img src="#" alt="Pessoa 01" /></li>
    ...
</ul>


<p>```</p>

<p>Então, no CSS eu preciso setar a quantidade de ítens que eu quero por linha. Como são oito ítens no total, utilizaremos quatro por linha:</p>

<p>```css
.team-list li {</p>

<pre><code>width:23%;
margin:1% 1% 0 1%;
</code></pre>

<p>}
```</p>

<p>100% / 4 = 25%; menos 2% das margens left e right e 23% de largura pra cada ítem da lista. E agora em cada ítem, seto para que a imagem de dentro tenha sempre 100% de largura:</p>

<p>```css
.team-list img {</p>

<pre><code>width:100%;
</code></pre>

<p>}
```</p>

<p>Agora, utilizarei um pouco as <em>Media Queries</em> para fazer a mágica acontecer:</p>

<p>```css
@media (max-width:481px) {</p>

<pre><code>.team-list li {
    width:48%;
}
</code></pre>

<p>}
```</p>

<p>Quando a lista é acessada de um dispositivo com largura máxima de <strong>481px</strong>, será exibido apenas dois ítens por linha. Use essa lógica para otimizar ao máximo sua lista em cada tipo de resolução.</p>

<p>Utilizando quase o mesmo código, essa galeria de imagens poderia facilmente transformar-se numa listagem responsiva de produtos para <em>e-commerce</em>. Um comparador de preços ou qualquer outro tipo de interface que liste algo horizontalmente também se encaixaria. Um conceito importante em <strong>Design Modular</strong> é <strong>Refatoração</strong>.</p>

<p>Ao se trabalhar com listagens responsivas, é muito importante entender o velho e bom <strong>layout fluído</strong>. Dentro dos <em>breakpoints</em>, seus componentes (no caso a listagem) devem comportar-se de forma fluída e não engessada. Ou seja, não podemos apenas definir os <em>breakpoints</em> e esperar que as “coisas” fiquem certas dentro deles. Estas “coisas” precisam esticar, diminuir, aumentar, se comportar de acordo com cada contexto.</p>

<p><strong>Conclusão:</strong> Juntando o poder das <em>Media Queries</em> e o domínio por completo dos conceitos básicos de <em>box-model</em>, você pode criar interfaces bastante trabalhadas e relativamente acessíveis com pouco esforço. Antes de sair enxendo seu design de "firúlas", concentre-se no básico que é criar uma estrutura modular e não fixa; algo que se expanda.</p>

<p>Sua interface não deve ser feita apenas para atender a necessidade de hoje. Ela precisa ser projetada também para o futuro, fácil de ser continuada e integrada a novas features. Web Design é uma diciplina que trabalha com conteúdos e estratégias mutáveis, nada é definido, nada é para sempre. Faça sua interface responder a estas mudanças com facilidade, desenvolvendo-a de forma modular e flexível.</p>

<p>Não pense no Web Design apenas como um layout “codado” em HTML/CSS. Pense num Design projetado para Web que tenha vida própria, como algo subjetivo e não apenas visual.</p>

<h2>Outros posts da série</h2>

<p><a href="http://helabs.com.br/blog/2013/02/27/design-responsivo-parte-i-arquivos-css-e-breakpoints">Design Responsivo Parte I: Arquivos CSS e Breakpoints</a></p>

<h2>Links</h2>

<ul>
<li><a href="http://www.mikaelcarrara.com">Site Pessoal</a></li>
<li><a href="br.linkedin.com/in/mikaelcarrara/">Linkedin</a></li>
<li><a href="http://dribbble.com/mikaelcarrara">Portfólio no Dribbble</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Responsivo Parte I: Arquivos CSS e Breakpoints]]></title>
    <link href="http://helabs.com.br/blog/2013/02/27/design-responsivo-parte-i-arquivos-css-e-breakpoints/"/>
    <updated>2013-02-27T10:15:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/02/27/design-responsivo-parte-i-arquivos-css-e-breakpoints</id>
    <content type="html"><![CDATA[<p>Irei a partir de hoje lançar uma série de posts com minhas considerações a respeito de design responsivo.</p>

<p>Ao projetar uma interface Web responsiva (otimizada para <em>Tablets</em>, Celulares, TVs, Geladeiras e Carros), primeiramente defino os <em>breakpoints</em>, ou seja, defino os pontos de “quebra” do layout (resoluções de agentes de usuários) e através de <em>Media Queries (</em>CSS<em>3)</em> seto o comportamento desejado para cada uma das resoluções que gostaria de considerar no meu projeto.</p>

<!-- more -->


<p>Em “90%” dos casos, a solução a seguir atendeu muito bem minhas necessidades. Em primeiro lugar divido meus arquivos <em>CSS</em> da seguinte forma:</p>

<p><strong>site-core.css</strong>
Aqui eu coloco todo <em>CSS</em> genérico, estilos comuns em todas as versões da interface. este arquivo vai alimentar os outros dois abaixo;</p>

<p><strong>site-web.css</strong>
Responsável por estilos exclusivos para web;</p>

<p><strong>site-mobile.css</strong>
Finalmente um arquivo responsável por estilos específicos para dispositivos móveis.</p>

<p>Separo uma versão só para Web por questões de compatibilidade com <em>Internet Explorer 8</em>. Sendo assim, no <strong>HEAD</strong> da aplicação eu seto através de um <a href="http://en.wikipedia.org/wiki/Conditional_comment">comentário condicional</a> para que o <em>IE8</em> leia apenas a versão Web:</p>

<p>```html</p>

<!--[if IE]>
  <link type="text/css" rel="stylesheet" href="site-web.css" media="screen" />
<![endif]-->


<p>```</p>

<p>Outros <em>browsers</em> com maior suporte a especificação das <em>CSS3</em> aplicam as <em>Media Queries</em> como explicado no início do post. Então juntando tudo ficaria assim:</p>

<p><code>html
&lt;link type="text/css" rel="stylesheet" href="site-core.css" /&gt;
&lt;link type="text/css" rel="stylesheet" href="site-web.css" media="screen and (min-width:801px)" /&gt;
&lt;link type="text/css" rel="stylesheet" href="site-mobile.css" media="handheld, screen and (max-width:801px)" /&gt;
</code></p>

<p>Então, explicando melhor: Estou dizendo que o <em>CSS</em> para Web só deve ser exibido quando a largura <strong>mínima</strong> do navegador for no mínimo <strong>801px</strong> e a versão mobile apenas em resoluções com largura <strong>máxima</strong> de <strong>801px</strong>. O arquivo <strong>site-core.css</strong> como já explicado, alimenta os outros dois com estilos genéricos.</p>

<p>A seguir, configure sua <em>viewport</em> da forma como preferir (entrarei em mais detalhes num próximo post):</p>

<p><code>html
&lt;meta name="viewport" content="width=device-width, user-scalable=no" /&gt;
</code></p>

<p>Agora vamos definir os breakpoints para todas as versões mobile. Apenas para frisar: O arquivo <em>CSS</em> mobile engloba tanto <em>Tablets</em> quando Celulares e <em>Smartphones</em>. Deixei apenas a versão Web num arquivo separado para poder usá-la também como uma “versão IE8” sem necessariamente criar uma versão de <em>CSS</em> com Hacks só para ele. Não tive trabalho a mais com o <em>IE8</em>.</p>

<p>Voltando...</p>

<p>Todo estilo que coloco dentro do arquivo <em>CSS</em> <strong>site-mobile.css</strong> mas “fora” de Media Queries é destinado a agentes de usuários com largura <strong>máxima</strong> de <strong>801px</strong> como já explicado. Na verdade então, podemos já ir definindo os estilos pra <em>Tablets</em> diretamente no arquivo.</p>

<p><code>css
.holder {
  width:700px;
}
</code></p>

<p>Então finalmente os estilos para agentes de usuários com largura <strong>máxima</strong> de <strong>686px</strong>. Nos meus testes funcionou muito bem tanto em <em>Smartphones</em> modernos como <em>Galaxy Nexus</em> e <em>iPhone 5</em> que possuem resoluções bem grandes no modo <em>landscape</em> como também no <em>iPhone 4</em> e <em>HTC Nexus One</em> que já são mais antigos.</p>

<p>```css
@media (max-width:686px) {</p>

<p>  .holder {</p>

<pre><code>width:86%;
padding:0 7% 0 7%;
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>Esses valores são os que usei em algumas situações mas você é livre para explorar melhor as <em>Media Queries</em>, garanto que vai muito além de larguras definidas com unidades de medidas absolutas como estou fazendo nos exemplos. Experimente <strong>criar grids</strong> responsivas usando unidades de medidas relativas como <strong>%</strong> e <strong>EM</strong>.</p>

<p>Voltando pras <em>Medias Queries</em>...</p>

<p>Daí por diante é só ir diminuindo a resolução conformo você vai dando mais suporte a vários dispositivos:</p>

<p>```css
@media (max-width:381px) {</p>

<p>  background-image:none;</p>

<p>  .holder {</p>

<pre><code>width:94%;
padding:0 3% 0 3%;
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>Na maioria das vezes, conforme a resolução do dispositivo diminui, a capacidade de processamento também, então começam a aparecer estilos que otimizam o desempenho em dispositivos mais modestos.</p>

<p>Mudando um pouco de assunto mas dentro de um mesmo contexto, acho que quando você está aprendendo <em>CSS</em> básico ainda, mais importante do que o conceito de <strong>“Design Responsivo”</strong> em si é o conceito de “<a href="http://www.w3.org/TR/CSS2/box.html">Box-Model</a>”. Procure entender melhor como se comporta a renderização em cada browser.</p>

<p>Se você não domina completamente todos os elementos da sua interface no navegador Web, será um pouco mais difícil “aprender design responsivo”. Talvez você até o faça, mas seu trabalho não terá a qualidade esperada no final.</p>

<p><strong>Conclusão:</strong> Você precisa pensar para que cada dispositivo tenha a melhor experiência possível dentro de suas limitações. Através das <em>Media Queries</em> podemos definir estilos específicos para cada contexto e assim otimizar a experiência do usuário em diferentes situações.</p>

<h2>Outros posts da série</h2>

<p><a href="http://helabs.com.br/blog/2013/05/24/design-responsivo-parte-ii-listagens-e-galerias/">Design Responsivo Parte II: Listagens e Galerias</a></p>

<h2>Links</h2>

<ul>
<li><a href="http://www.mikaelcarrara.com">Site Pessoal</a></li>
<li><a href="br.linkedin.com/in/mikaelcarrara/">Linkedin</a></li>
<li><a href="http://dribbble.com/mikaelcarrara">Portfólio no Dribbble</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abandone o seu mockup e abrace o seu markup]]></title>
    <link href="http://helabs.com.br/blog/2013/01/07/abandone-o-seu-mockup-e-abrace-o-seu-markup/"/>
    <updated>2013-01-07T17:43:00-02:00</updated>
    <id>http://helabs.com.br/blog/2013/01/07/abandone-o-seu-mockup-e-abrace-o-seu-markup</id>
    <content type="html"><![CDATA[<p>Uma das decisões que tomei há alguns meses atrás foi deixar um pouco de lado o Photoshop, e começar a aprimorar as minhas habilidades no design de interfaces usando HTML, CSS e JS.</p>

<p>Isto tem me ajudado muito, conforme vou melhorando minhas skills de desenvolvimento front-end, mais coisas eu consigo criar diretamente no browser, sem me preocupar com a criação de layouts em softwares de edição de imagens, aumentando assim a minha produtividade.</p>

<!-- more -->


<p>Com o HTML5 e CSS3 isso tem se tornado cada vez mais relevante para a evolução dos meus projetos, me fazendo quebrar paradigmas no meu processo de trabalho, melhorando a qualidade final das interfaces projetadas e a experiência de uso dos produtos.</p>

<p>Trabalhando com aplicações web aqui na <a href="http://helabs.com.br">HE:labs</a>, que envolvem conteúdo e dados dinâmicos, diferentes larguras de tela para diferentes tipos de dispositivos, entre outras características, nós vamos percebendo que este processo de trabalho, utilizando mockups para validação e aprovação de um layout, acaba sendo muito desgastante e pouco agrega ao processo de descoberta que é o desenvolvimento de softwares. Quando inserimos o editor de texto como uma ferramenta de criação, temos resultados mais rápidos e palpáveis com uma visualização das telas direto no browser, conseguimos um ganho significativo junto a equipe e stakeholders para o resultado final dos projetos.</p>

<p>Por que abandonar o seu mockup</p>

<p>Os softwares de edição de imagens são utilizados para criação de material impresso, e naturalmente isso foi sendo inserido nos projetos de design para a web, porém eles não tem a mesma capacidade de simular e renderizar uma interface como o próprio browser. Listo aqui alguns motivos para começar a desconsiderar o photoshop como a melhor opção:</p>

<ul>
<li><p>muito tempo é perdido para se desenhar elementos de uma interface no photoshop, uma tabela por exemplo, pode ser feita rapidamente com algumas linhas de código;</p></li>
<li><p>o trabalho feito no photoshop, precisa ser refeito depois na etapa do front-end;</p></li>
<li><p>mudanças que aparentam serem pequenas, muitas vezes demoram bastante para se mudar em todas as layers de um .psd;</p></li>
<li><p>a tentação dos detalhes é maior, você se pega perdendo muito tempo em elementos que muitas vezes não necessitam o desperdicio de tempo naquele momento do projeto;</p></li>
<li><p>se você está projetando uma experiência de uso, você precisa ver e sentir ela acontecendo. Com uma imagem estática no photoshop, você não tem está percepção completa;</p></li>
<li><p>os softwares de edição de imagens ainda são muito caros, ainda mais aqui no Brasil.</p></li>
</ul>


<p>Por que abraçar o markup:</p>

<p>Hoje eu me divirto muito mais na hora de começar a desenvolver uma interface, abrindo o meu editor de textos. Eu não tenho muita motivação para abrir o photoshop e começar a esboçar uma imagem que não vai representar a realidade do meu produto final. Alguns motivos são:</p>

<ul>
<li><p>o tempo de trabalho é melhor aproveitado, depois que você tem o domínio das ferramentas as coisas fluem muito bem;</p></li>
<li><p>não vai haver diferenças entre o que você está projetando e o que os usuários vão ver na tela de seus dispositivos;</p></li>
<li><p>você consegue testar os problemas entre os diferentes browsers conforme vai desenvolvendo, corrigindo e criando alternativas conforme problemas vão aparecendo;</p></li>
<li><p>você consegue ter uma visão melhor dos breakpoints quando se está projetando interfaces responsivas;</p></li>
<li><p>o seu trabalho é feito somente uma vez, depois disso com alguns ajustes e melhorias no código, tudo está pronto para ser reutilizado em produção;</p></li>
</ul>


<p>Este é um processo que nós tentamos seguir na <a href="http://helabs.com.br">HE:labs</a>, e que tem se mostrado eficiente para nossos projetos. Não quer dizer que tenha que ser considerado um padrão para todos, cada caso é um caso e cada projeto também.</p>

<p>Acreditamos que o importante é sempre experimentar coisas novas que tragam a evolução para a internet, para os nossos clientes e para os usuários dos produtos que desenvolvemos.</p>
]]></content>
  </entry>
  
</feed>
