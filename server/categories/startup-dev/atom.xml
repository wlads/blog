<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: startup dev | Blog da HE:labs]]></title>
  <link href="http://helabs.com.br/blog/categories/startup-dev/atom.xml" rel="self"/>
  <link href="http://helabs.com.br/blog/"/>
  <updated>2013-08-30T10:44:41-03:00</updated>
  <id>http://helabs.com.br/blog/</id>
  <author>
    <name><![CDATA[Time HE:labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aprendizados com o Startup DEV]]></title>
    <link href="http://helabs.com.br/blog/2013/01/25/aprendizados-com-startup-dev/"/>
    <updated>2013-01-25T10:00:00-02:00</updated>
    <id>http://helabs.com.br/blog/2013/01/25/aprendizados-com-startup-dev</id>
    <content type="html"><![CDATA[<p>O <a href="http://startupdev.com.br">Startup DEV</a> é um modelo de desenvolvimento bastante fora do padrão do mercado. Afinal, são dois dias e no final sai um produto funcional. Esses dois dias proporcionam experiências e aprendizados importantes. Vou listar alguns pontos neste post.</p>

<!-- more -->


<h3><em>Desenhar é muito importante!</em></h3>

<p>Após conversamos com o cliente e captar a ideia do projeto, partimos para fazer os desenhos na folha de papel. Desenhamos todas as telas e os fluxos do sistema da forma que imaginamos que ele deva ser. Disposição dos elementos, textos, mensagens. Isso ajuda em dois pontos: procurar soluções simples e transmitir a ideia para os outros membros da equipe e para o cliente.</p>

<p>O Startup DEV é um processo de desenvolvimento ágil. É bem curto, mas é! Dois dias é o período de uma mini-iteração que no final consegue entregar um produto funcional. Miramos a <a href="http://desenvolvimentoagil.com.br/xp/valores/simplicidade">simplicidade</a> nas soluções do problema não só porque é um dos valores do <a href="http://desenvolvimentoagil.com.br/xp">XP</a>, por exemplo, mas também porque não seria viável, nem inteligente, desenvolver algo complexo em tão pouco tempo.</p>

<h3><em>Redução</em></h3>

<p><a href="http://helabs.com.br/blog/2013/01/23/todo-sisteminha-comeca-pequenininho/">Todo sistema começa pequeno</a>. Normalmente o cliente chega com uma ideia gigante pra um sistema, que possívelmente demoraria 1 ano pra ficar pronta. Temos que reduzir isso para conseguirmos desenvolver algo em dois dias.</p>

<p>Como fazemos? Ao conversar com o cliente sobre a ideia dele, nós detectamos o core do produto e assim fazemos a priorização junto com o cliente sobre o que é mais importante para o sistema.</p>

<p>É o primeiro passo para o projeto. E para muitos projetos, o melhor primeiro passo pode ser o Startup DEV, pois em dois dias entrega uma pequena parte funcional do sistema onde, se for o caso, é possível validar a ideia no mercado. Muitos clientes são frustrados por prazos extensos e imprecisos.</p>

<p><a href="http://sucessoemsoftware.com.br/">Uma dica para sucesso em software.</a></p>

<h3><em>Rails Template e Heroku &lt;3</em></h3>

<p>Aqui na HE:labs utilizamos o Heroku como Cloud SaaS para praticamente todos os nossos projetos. Perder pouco tempo no setup dos projetos ajuda bastante. Não precisamos ficar configurando praticamente nada. E com a ajuda do nosso <a href="https://github.com/Helabs/rails-template">rails-template</a>, que adiciona mais algumas configurações e gems default dos nossos projetos, conseguimos em menos de 30 minutos colocar a aplicação online.</p>

<p>O Rodrigo Pinto tem uma talk bacana sobre Platform as a Service que você pode ver <a href="https://speakerdeck.com/rodrigoospinto/paas-plataform-as-a-service">aqui</a></p>

<h3><em>Código testado e reusável</em></h3>

<p>Nós nunca escrevemos códigos sem testes. Nunca! Nossos clientes sempre perguntam: "Mas e se der algum problema, algum bug depois que vocês finalizarem?". 100% de cobertura de testes ajudam a eliminar essa preocupação. Nunca fazemos deploys com a cobertura menor que 100%.</p>

<p>Isso também auxilia em outro ponto. Normalmente, acabamos usando alguns snippets de código de outro projeto, como: autenticação, integrações com APIs. Pelo fato do código estar coberto por testes, nós conseguimos extrair essas pequenas partes e reusá-las e outros projetos, ou até mesmo fazer <a href="http://helabs.com.br/opensource/">gems</a>.</p>
]]></content>
  </entry>
  
</feed>
