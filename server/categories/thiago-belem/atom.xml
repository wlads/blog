<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thiago Belem | Blog da HE:labs]]></title>
  <link href="http://helabs.com.br/blog/categories/thiago-belem/atom.xml" rel="self"/>
  <link href="http://helabs.com.br/blog/"/>
  <updated>2013-08-30T10:44:41-03:00</updated>
  <id>http://helabs.com.br/blog/</id>
  <author>
    <name><![CDATA[Time HE:labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gerenciando assets com o Bower]]></title>
    <link href="http://helabs.com.br/blog/2013/07/08/gerenciando-assets-com-o-bower/"/>
    <updated>2013-07-08T13:35:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/07/08/gerenciando-assets-com-o-bower</id>
    <content type="html"><![CDATA[<p><img src="http://bower.io/img/bower-logo.png" title="Bower" alt="Bower" /></p>

<p>O Bower (<a href="http://bower.io">bower.io</a>), criado pelo galerê do <strong>Twitter</strong>, é um "gerenciador de pacotes para web", mas especificamente para pacotes de Front-end.</p>

<!--more-->


<p>A ideia por trás dele é bem simples: você lista as dependências de JS (jQuery, jQuery Highlight, Backbone e etc.) em um arquivo <code>bower.json</code> que fica dentro do seu projeto, e controla a instalação/atualização desses pacotes por linha de comando.</p>

<h3>Intalando o Bower</h3>

<p>Antes de tudo, você vai precisar do <a href="http://nodejs.org/">Node.js</a> e do <a href="http://npmjs.org/">NPM</a> instalados na sua máquina.</p>

<p>Agora é só usar o NPM para instalar o Bower globalmente no seu sistema:</p>

<p><code>bash
npm install -g bower
</code></p>

<h3>Instalando pacotes com o Bower</h3>

<p>Agora você pode instalar pacotes de três formas diferentes:</p>

<p>```bash</p>

<h1>Instala os pacotes definidos no bower.json do seu projeto</h1>

<p>bower install</p>

<h1>Instala um pacote específico</h1>

<p>bower install <package></p>

<h1>Instala uma versão (git tag) de um pacote</h1>

<p>bower install <package>#<version>
```</p>

<p>Onde <code>&lt;package&gt;</code> pode ser um dos seguintes itens:</p>

<ul>
<li>O nome de um pacote registrado no Bower, por exemplo <code>jquery</code></li>
<li>Um repositório Git remoto, por exemplo <code>git://github.com/someone/some-package.git</code> (público ou privado)</li>
<li>Um repositório Git local, por exemplo <code>/var/www/jquery.git/</code></li>
<li>Um atalho para um repositório no GitHub, por exemplo <code>someone/some-package</code></li>
<li>A URL de um arquivo <code>zip</code> ou <code>tar.gz</code></li>
</ul>


<p>Todos os pacotes serão instalados numa pasta <code>bower_components</code> dentro do seu projeto. E a ideia é que você nunca altere o conteúdo dessa pasta, nem dos pacotes dentro dela. Por isso, uma boa é colocá-la no seu <code>.gitignore</code>.</p>

<h3>Definindo as dependências do seu projeto no bower.json</h3>

<p>O conteúdo do arquivo do seu bower.json descreve o seu projeto e suas dependências num projeto onde usamos o <strong>jQuery</strong> e o <strong>Angular.js</strong>. Ele seria mais ou menos assim:</p>

<p>```json
{
  "name": "meu-projeto",
  "version": "0.0.0",
  "dependencies": {</p>

<pre><code>"jquery": "master",
"angular": "1.0.7"
</code></pre>

<p>  }
}
```</p>

<p>Após rodar o comando de instalação:</p>

<p><code>bash
bower install
</code></p>

<p>Veríamos o seguinte output:</p>

<p><code>bash
bower cloning git://github.com/angular/bower-angular.git
bower cached git://github.com/angular/bower-angular.git
bower fetching angular
bower cloning git://github.com/components/jquery.git
bower cached git://github.com/components/jquery.git
bower fetching jquery
bower checking out angular#v1.0.7
bower copying /Users/digdin/.bower/cache/angular/ef2188def21eb1bbd1f1792311942a53
bower checking out jquery#2.0.2
bower copying /Users/digdin/.bower/cache/jquery/29cb4373d29144ca260ac7c3997f4381
bower installing angular#1.0.7
bower installing jquery#2.0.2
</code></p>

<p>E com isso acabamos de instalar o Angular.js (1.0.7) e o jQuery (2.0.2) no nosso projeto!</p>

<p>Se amanhã sair outra versão do jQuery, podemos atualizá-lo com:</p>

<p><code>bash
bower update
</code></p>

<p>E o jQuery será atualizado, mas o Angular permancerá na versão 1.0.7, pois foi assim que definimos no nosso <code>bower.json</code>.</p>

<h3>Incluindo assets instalados com o Bower</h3>

<p>Claro que esse passo é opcional se você estiver incluindo assets de outra forma (Sprockets?). Mas vou deixar aqui um pequeno exemplo para não ficarem dúvidas.</p>

<p>Para incluir os arquivos de um projeto, não existe magia negra, é só usar o caminho completo:</p>

<p>```html</p>

<script src="http://helabs.com.br/blog/bower_components/jquery/jquery.min.js"></script>


<script src="http://helabs.com.br/blog/bower_components/angular/angular.min.js"></script>


<p>```</p>

<h3>Conclusão</h3>

<p>Acredito que o Bower tenha bastante futuro, pois estamos cada vez mais tirando as dependências de dentro dos nossos projetos e repositórios, deixando apenas o que é realmente único e importante para a aplicação.</p>

<p>Até a próxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protegendo seus buckets do S3 com chaves IAM]]></title>
    <link href="http://helabs.com.br/blog/2013/05/09/protegendo-seus-buckets-do-s3-com-chaves-iam/"/>
    <updated>2013-05-09T11:00:00-03:00</updated>
    <id>http://helabs.com.br/blog/2013/05/09/protegendo-seus-buckets-do-s3-com-chaves-iam</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/2013-05-08/bucket.jpg" alt="image" /></p>

<p>Você usa <strong>buckets</strong> do S3 para armazenar os uploads e assets da sua aplicação?</p>

<p>A maioria das pessoas usam os mesmos dados de acesso (<em>access key</em> e <em>secret access key</em>) para acessar o(s) bucket(s), tanto em desenvolvimento quanto em produção.</p>

<p>Isso pode trazer alguns problemas para a aplicação...</p>

<!-- more -->


<p>Como:</p>

<ul>
<li>Os dados de acesso ao bucket (e provavelmente à conta do AWS) estão presentes nos arquivos de configuração;</li>
<li>O bucket acessado (e bombardeado com arquivos de testes) é o mesmo bucket usado em produção;</li>
<li>Não há nenhum tipo de restrição, quem estiver trabalhando no desenvolvimento do projeto terá acesso ao bucket com os arquivos de produção.</li>
</ul>


<p>A solução para todos os problemas acima é restringir o acesso aos buckets, separando os dados de acesso (chaves) de cada um:</p>

<h1>Crie dois buckets</h1>

<p>Não há nada de misterioso ou novo aqui, apenas crie dois buckets:</p>

<ul>
<li>Um bucket para desenvolvimento: <strong>meuprojeto-development</strong></li>
<li>Um bucket para production: <strong>meuprojeto-produciton</strong></li>
</ul>


<h1>Crie dois usuários IAM</h1>

<p>Agora você precisa criar dois usuários (pra facilitar, com o mesmo nome dos buckets):</p>

<p><img src="/images/posts/2013-05-08/iam-new-user.png" alt="image" /></p>

<p><img src="/images/posts/2013-05-08/iam-new-users.png" alt="image" /></p>

<p>Não se esqueça de anotar as chaves de acesso de cada usuário:</p>

<p><img src="/images/posts/2013-05-08/iam-credentials.png" alt="image" /></p>

<h1>Defina as regras de acesso</h1>

<p>Agora que os usuários estão criados, precisamos definir permissões de acesso.</p>

<p>Marque um usuário. Para isso, vá em <strong>Permissions</strong> > <strong>Attach User Policy</strong> > Custom Policy.</p>

<p>Dê um nome pra regra e use o seguinte template:</p>

<p>```json
{
  "Statement": [</p>

<pre><code>{
  "Sid": "Stmt1368030337093",
  "Action": [
    "s3:*"
  ],
  "Effect": "Allow",
  "Resource": [
    "arn:aws:s3:::NOME_DO_BUCKET/*"
  ]
}
</code></pre>

<p>  ]
}
```</p>

<p>Substitua <strong>NOME_DO_BUCKET</strong> pelo nome do bucket criado anteriormente e crie essa regra para o bucket de cada usuário.</p>

<h1>Conclusão</h1>

<p>Agora você tem dois buckets com acessos separados, um para desenvolvimento e um para produção.</p>

<p>Espero que tenham gostado, e até a próxima! :)</p>
]]></content>
  </entry>
  
</feed>
